// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать.
// Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ
// Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы
// по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль
// в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
  alboms: [
    {
      title: "Альбом Фактора 2",
      artist: "Фактор 2",
      year: "2016"
    },
    {
      title: "Альбом Руки вверх",
      artist: "Руки вверх",
      year: "2009"
    },
    {
      title: "Альбом Нэнси",
      artist: "Нэнси",
      year: "1995"
    }
  ],
  [Symbol.iterator]: function () {
    let index = 0;
    return {
      next: () => {
        if (index < this.alboms.length) {
          const currentAlbom = this.alboms[index];
          index++;
          return { value: currentAlbom, done: false }
        }
        return { done: true }
      }
    }
  }
}

for (const currentAlbom of musicCollection) {
  console.log(`Название альбома: ${currentAlbom.title} - Исполнитель: ${currentAlbom.artist} (Год выпуска): ${currentAlbom.year}`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных
// блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого
// клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const cooks = new Map();
const dishes = new Map();
const orders = new Map();

cooks.set('Виктор', 'специализация: Пицца');
cooks.set('Ольга', 'специализация: Суши');
cooks.set('Дмитрий', 'специализация: Десерты');

dishes.set('Пицца "Маргарита"', 'повар: Виктор');
dishes.set('Пицца "Пепперони"', 'повар: Виктор');
dishes.set('Суши "Филадельфия"', 'повар: Ольга');
dishes.set('Суши "Калифорния"', 'повар: Ольга');
dishes.set('Тирамису"', 'повар: Дмитрий');
dishes.set('Чизкейк"', 'повар: Дмитрий');

function orderAssembly(client, dish) {
  if (!orders.has(client)) {
    orders.set(client, []);
  }
  orders.get(client).push(dish);
}

orderAssembly('Алексей', 'Пицца "Пепперони"');
orderAssembly('Алексей', 'Тирамису');
orderAssembly('Мария', 'Суши "Калифорния"');
orderAssembly('Мария', 'Пицца "Маргарита"');
orderAssembly('Ирина', 'Чизкейк');
console.log(cooks);
console.log(dishes);
console.log(orders);